service: ds4a-project

frameworkVersion: '3'

custom:
  datalakeBucket: ds4a-co6-t107-datalake
  secret-name: ${self:service}-${sls:stage}-db-connection-secret

provider:
  name: aws
  region: us-east-1
  runtime: python3.8
  iam:
    role:
      statements:
        - Effect: Allow
          Resource: arn:aws:s3:::${self:custom.datalakeBucket}/*
          Action:
            - s3:HeadObject
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
        - Effect: Allow
          Resource: !Ref RDSSecret
          Action: secretsmanager:GetSecretValue
  httpApi:
    cors: true
  ecr:
    scanOnPush: true
    images:
      predict-image:
        path: api/predict/
        file: Dockerfile

package:
  patterns:
    - "!**/**"
  individually: true
  
layers:
  pandas:
    path: libs/pandas
    package:
      patterns:
        - "**/**"
        - "!**/*.egg-info/"
        - "!**/*.dist-info/"
        - "!**/*.pyc"
        - "!**/*.pyo"
        - "!**/__pycache__/"
        - "!**/docs"
        - "!**/tests"
    description: "Includes pandas and pyarrow"

  database:
    path: libs/database
    package:
      patterns: 
        - "**/**"
        - "!**/*.egg-info/"
        - "!**/*.dist-info/"
        - "!**/*.pyc"
        - "!**/*.pyo"
        - "!**/__pycache__/"
        - "!**/docs"
        - "!**/tests"
    description: "Includes psycopg2"
  
  fastapi:
    path: libs/fastapi
    package:
      patterns:
        - "**/**"
        - "!**/*.egg-info/"
        - "!**/*.dist-info/"
        - "!**/*.pyc"
        - "!**/*.pyo"
        - "!**/__pycache__/"
        - "!**/docs"
        - "!**/tests"
    description: "FastAPI dependencies"

resources:
  Resources:
    #This is a Secret resource with a randomly generated password in its SecretString JSON.
    RDSSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: ${self:custom.secret-name}
        Description: "This is a Secrets Manager secret for an RDS DB instance"
        GenerateSecretString:
          SecretStringTemplate: '{"username": "ds4auser"}'
          GenerateStringKey: "password"
          PasswordLength: 16
          ExcludeCharacters: '"@/\'

    # Security group to allow access to db port
    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow access to RDS PostgreSQL database
        GroupName: ${self:service}-postgres-sg
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0

    # This is an RDS instance resource. The master username and password use dynamic references
    # to resolve values from Secrets Manager. The dynamic reference guarantees that CloudFormation
    # will not log or persist the resolved value. We use a Ref to the secret resource's logical id
    # to construct the dynamic reference, since the secret name is generated by CloudFormation.
    RDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20
        StorageType: gp2
        DBInstanceClass: db.t4g.micro
        Engine: postgres
        DBName: project
        MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
        MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
        BackupRetentionPeriod: 0
        DBInstanceIdentifier: ${self:service}-${sls:stage}-db-instance
        VPCSecurityGroups:
          - !GetAtt DBSecurityGroup.GroupId

    #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
    #the referenced RDS instance
    SecretRDSInstanceAttachment:
      Type: "AWS::SecretsManager::SecretTargetAttachment"
      Properties:
        SecretId: !Ref RDSSecret
        TargetId: !Ref RDSInstance
        TargetType: AWS::RDS::DBInstance

functions:
  parquetize:
    handler: functions/parquetize.handler
    timeout: 900 # 15 min, max timeout
    package:
      patterns:
        - functions/parquetize.py
    layers:
      - !Ref PandasLambdaLayer
    events:
      - s3:
          bucket: ${self:custom.datalakeBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: preprocessed/
            - suffix: .csv
  
  ingest:
    handler: functions/ingest.handler
    timeout: 900 # 15 min, max timeout
    package:
      patterns:
        - functions/ingest.py
        - functions/tables.py
    layers:
      - !Ref PandasLambdaLayer
      - !Ref DatabaseLambdaLayer
    environment:
      SECRET_NAME: !Ref RDSSecret
    events:
      - s3:
          bucket: ${self:custom.datalakeBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: parquetized/
            - suffix: .parquet

  data-api:
    handler: api.data.main.handler
    timeout: 29
    package:
      patterns:
        - api/data/*
        - api/__init__.py
    layers:
      - !Ref FastapiLambdaLayer
      - !Ref DatabaseLambdaLayer
    environment:
      SECRET_NAME: !Ref RDSSecret
    events:
      - httpApi:
          method: any
          path: /data/{proxy+}

  predict-api:
    image: predict-image
    memorySize: 2048
    timeout: 29
    events:
      - httpApi:
          method: any
          path: /predict/{proxy+}
          